--!strict
-- @xmx Saving 2025

type GetSaveData = {
	UserID: number
}

type GetSchema = {
	Player: Player
}

export type SaveSchema = {
	Get: (Player: Player) -> any,
	SaveData: (UserID: number, Save: any) -> any,
	FlushAll: () -> ()
}

local Save = {} :: SaveSchema

local DatastoreService = game:GetService("DataStoreService")
local SaveDatastore = DatastoreService:GetDataStore("Player Data")
local Statss = require(script.Stats) :: {[string]: any}

local SaveCache = {}

local function GetKey(UserID: number): string
	return string.format("Player_%d_Save", UserID)
end

local function Retry(operation: () -> (), maxAttempts: number): (boolean, any?)
	for attempt = 1, maxAttempts do
		local results = { pcall(operation) }
		local success = results[1]
		local value = results[2]

		if success then
			return true, value
		end

		local errorMessage = tostring(value)
		if string.find(errorMessage, "429") then
			task.wait(math.min(2 ^ attempt, 10))
		else
			task.wait(0.5)
		end
	end

	return false, nil
end


function GetSaveData(UserID: number)
	local key = GetKey(UserID)
	local Data 
	local success, Data = Retry(function()
		Data = SaveDatastore:GetAsync(key)
	end, 3)

	if not success or type(Data) ~= "table" then
		Data = {}
	end

	for statName, defaultValue in pairs(Statss) do
		if Data[statName] == nil then
			Data[statName] = defaultValue
		end
	end

	return Data
end

Save.Get = function(Player: Player)
	local UserID = Player.UserId
	if not Player or not UserID then
		Player:Kick("[CRITICAL] Saving Failure, Please rejoin!")
		return false
	end

	if not SaveCache[UserID] then
		local success, data = pcall(function()
			return GetSaveData(UserID)
		end)

		if success and data then
			SaveCache[UserID] = data
		else
			Player:Kick("[CRITICAL] Failed to load save data. Please try again.")
			return false
		end
	end

	return SaveCache[UserID]
end

Save.SaveData = function(UserID, Save): any
	if not Save then
		return false
	end

	local key = GetKey(UserID)

	local success = Retry(function()
		SaveDatastore:SetAsync(key, Save)
	end, 3)

	if success then
		return true
	else
		return false, "Unknown Error"
	end
end

Save.FlushAll = function()
	for UserID, data in pairs(SaveCache) do
		Save.SaveData(UserID, data)
	end
end

game.Players.PlayerRemoving:Connect(function(player)
	local UserID = player.UserId
	if SaveCache[UserID] then
		Save.SaveData(UserID, SaveCache[UserID])
	end
end)

game.Players.PlayerAdded:Connect(function(player)
	local _ = Save.Get(player)
end)

game:BindToClose(function()
	Save.FlushAll()
end)

return Save
